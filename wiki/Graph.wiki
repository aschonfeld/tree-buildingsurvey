#summary Developer's Guide: Graph (INCOMPLETE)

= Introduction =
Graph represents the student's completed tree. Includes graph construction and analysis methods.



==Construction==
addVertex(): put vertex v in this graph
addEdge(): put Edge e n this graph

setGraphDirection: An attempt to determine whether student constructed a graph with consistent directionality (all connections go from root to leaves or vice versa). Not successful, should be fixed before being relied on. 


== Analysis ==


== Shortest Path calculations ==


== rendering ==
render(): set the upper left corner of the graph in a good spot, then call each component's render() method to display the graph.

== Getters ==
toString(): returns a list of vertices and connections, using their toString methods
getStudentName():

getVertexByID(): returns a Vertex, given its ID number
getInfo(): constructs a 3-line string for each Vertex, listing its "from" and "to" connections.

getUpperLeft(): returns the upper left point of the graph. This point is not necessarily occupied: if there is a node at (50, 100) and another at (100, 50), this method will return (50, 50)

get LowerRight(): returns the lower right corner of the graph. Same caveat as for UpperLeft. 

getShortestPathes(): calls the runFloydWarshall() method and returns the result. *This looke like it returns a class-level variable, which would be odd, unless it's being called from outside the class.*


getPathIndexNames(): returns the pathIndexNames. If the FloydWarshall algorithm has not been run, run it. 



= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages