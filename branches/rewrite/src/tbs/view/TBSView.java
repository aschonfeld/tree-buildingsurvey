package tbs.view;
//TBSView.java version 0.3

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import javax.swing.JComponent;
import javax.swing.JOptionPane;

import tbs.model.EmptyNode;
import tbs.model.ModelElement;
import tbs.model.OrganismNode;
import tbs.model.TBSButton;
import tbs.model.TBSModel;

public class TBSView extends JComponent {

	/**
	 * 8-byte serialization class ID generated by
	 * https://www.fourmilab.ch/hotbits/secure_generate.html
	 */
	private static final long serialVersionUID = 0xBB7D0BF0A83E3AF6L;
	
	private TBSModel model;

	//boundary between active and inactive elements.
	//Name can be changed. 
	public static int LINE_OF_DEATH = 120;


	// Contains the length and width of all organism nodes
	private int organismNodeWidth;
	private int organismNodeHeight;
	
	// minimum number of pixels around the right and left of an organism's name
	private int paddingWidth;
	
	// Space between bottom and top of images
	private int ySpacing;
	
	// Font Properties
	private String fontName; // Use default font
	private int fontStyle;
	private int fontSize;
	
	public TBSView(TBSModel m, int oNW, int oNH, int pw, int ys, String fName, int fStyle, int fSize) {
        model = m;
        organismNodeWidth = oNW;
        organismNodeHeight = oNH;
        paddingWidth = pw;
        ySpacing = ys;
        fontName = fName;
        fontStyle = fStyle;
        fontSize = fSize;
	}
	
	public String promptUserForString(String message) {
		return (String) JOptionPane.showInputDialog(message);
	}
	
	public int promptUserForYesNoCancel(String message) {
		return JOptionPane.showConfirmDialog(null, message);
	}
	
	public void drawString(Graphics2D g2, TBSButton b, int xOffset)
	{
		
		g2.setColor(Color.black);
		int stringHeight = 0;
		int stringWidth = 0;
		int x = 0;
		int y = 0;
		RenderingHints rh = new RenderingHints(
		RenderingHints.KEY_TEXT_ANTIALIASING,
		RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
		g2.setRenderingHints(rh);
		x = xOffset;
		stringHeight = (int) b.getStringBounds().getHeight();
		y = b.getUpperY() + organismNodeHeight - (organismNodeHeight - stringHeight) / 2;
   		Point2D loc = new Point(x, y);
   		Font f = new Font(fontName, fontStyle, fontSize);
   		g2.setFont(f);
   		FontRenderContext frc = g2.getFontRenderContext();
   		TextLayout layout = new TextLayout(b.getName(), f, frc);
   		layout.draw(g2, (float)loc.getX(), (float)loc.getY());
	
		Rectangle2D bounds = layout.getBounds();
	}

	public void drawString(Graphics2D g2, OrganismNode on, int xOffset) {
		// ReneringHints tell
		g2.setColor(Color.black);
		int stringHeight = 0;
		int stringWidth = 0;
		int x = 0;
		int y = 0;
		RenderingHints rh = new RenderingHints(
		RenderingHints.KEY_TEXT_ANTIALIASING,
		RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
		g2.setRenderingHints(rh);
		x = xOffset;
		stringHeight = (int) on.getStringBounds().getHeight();
		y = on.getUpperY() + organismNodeHeight - (organismNodeHeight - stringHeight) / 2;
   		Point2D loc = new Point(x, y);
   		Font f = new Font(fontName, fontStyle, fontSize);
   		g2.setFont(f);
   		FontRenderContext frc = g2.getFontRenderContext();
   		TextLayout layout = new TextLayout(on.getName(), f, frc);
   		layout.draw(g2, (float)loc.getX(), (float)loc.getY());
		Rectangle2D bounds = layout.getBounds();
	}

	public void renderButton(Graphics g, TBSButton button)
	{
		Graphics2D g2 = (Graphics2D) g;
	
		TBSButton b = button;
		int stringWidth = (int) b.getStringBounds().getWidth();
		int stringXOffset= (b.getWidth()-stringWidth)/2;
		int stringStartX = b.getLeftX() + stringXOffset;
		g2.setColor(Color.white);
		g2.fillRect(b.getLeftX(), b.getUpperY(), b.getWidth(),
				b.getHeight());
		drawString(g2, b, stringStartX);
	}

	public void renderModelElement(Graphics g, ModelElement me) {
		Graphics2D g2 = (Graphics2D) g;
		int stringWidth = 0;
		int imageWidth = 0;
		int imageStartX = 0;
		int stringStartX = 0;
		if (me instanceof TBSButton)
			renderButton(g, (TBSButton) me);
		else if(me instanceof OrganismNode) 
		{
			OrganismNode on = (OrganismNode) me;
			stringWidth = (int) on.getStringBounds().getWidth();
			imageWidth = on.getImage().getWidth();
			// center image and text
			int imageXOffset = (organismNodeWidth - imageWidth - stringWidth) / 2;
			imageStartX = on.getLeftX() + imageXOffset;
			stringStartX = on.getLeftX() + imageXOffset + imageWidth + paddingWidth;
			g2.setColor(Color.white);
			g2.fillRect(on.getLeftX(), on.getUpperY(), organismNodeWidth, organismNodeHeight);
			g2.drawImage(on.getImage(), imageStartX, on.getUpperY(), null);
			drawString(g2, on, stringStartX);
		}
		else if (me instanceof EmptyNode)
		{
			EmptyNode en = (EmptyNode) me;
			String name = en.getName();
			int leftX = en.getLeftX();
			int upperY = en.getUpperY();
			if(name == null) name = "";
			// make empty nodes light purple (like Prof. White's node.gif)
			g2.setColor(new Color(1.0f, 0.5f, 1.0f));
			g2.fillRect(en.getLeftX(), en.getUpperY(), en.getWidth(), en.getHeight());
			// make bold for greater visibility;
	  		Font f = new Font(fontName, Font.BOLD, 18);
	   		g2.setFont(f);
			if(name.length() > 0) {
				// zero length string gives an error
				Rectangle2D bounds = model.getStringBounds(g2, en.getName(), f);
				int h = (int) bounds.getHeight();
				int w = (int) bounds.getWidth();
				int stringX = leftX + (en.getWidth() / 2) - (w / 2);
				int stringY = upperY - h;
				g2.drawString(name, stringX, stringY);
			}
		}
	}
	
	public void refreshGraphics() {
		repaint();	
	}

	// this is what the applet calls to refresh the screen
	public void paintComponent(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		g2.setColor(Color.black);
		g2.fillRect(0, 0, getWidth(), getHeight());
		refreshGraphics();
		Iterator<ModelElement> itr = model.getElements().iterator();
		while(itr.hasNext()) {
			renderModelElement(g, itr.next());
		}
	}
}
