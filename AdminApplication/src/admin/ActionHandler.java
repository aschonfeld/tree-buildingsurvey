package admin;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.UIManager;

import admin.StudentDataColumns.ColumnDataHandler;

public class ActionHandler extends JPanel {    
	/**
	 * 8-byte serialization class ID generated by
	 * https://www.fourmilab.ch/hotbits/secure_generate.html
	 */
	private static final long serialVersionUID = 0x60655B840361BFA4L;
	
	public Action exitAction;
	public Action printAction;
	public Action exportAction;
	public AdminApplication parent;
	
	
	public class ExitAction extends AbstractAction {

		private static final long serialVersionUID = 1740545338294704279L;

		public ExitAction() {
			super("Exit");
		}

		//@0verride
		public void actionPerformed(ActionEvent arg0) {
			System.exit(0);
		}
	}
	
	public class PrintAction extends AbstractAction {

		private static final long serialVersionUID = 1740545322294704279L;

		public PrintAction() {
			super("Print Graph");
		}

		//@0verride
		public void actionPerformed(ActionEvent arg0) {
			parent.printGraphInfo();
			PrinterJob printJob = PrinterJob.getPrinterJob();
			printJob.setPrintable(parent.treeView);
			if (printJob.printDialog()){
				try { 
					printJob.print();
				} catch(PrinterException pe) {
					System.out.println("Error printing: " + pe);
				}
			}
		}
	}
	
	public class NamesAction extends AbstractAction {

		private static final long serialVersionUID = 3382645405034163126L;
		public NamesAction() {
			super();
		}

		//@0verride
		public void actionPerformed(ActionEvent e) {
			parent.toggleShowNames();
			JMenuItem item = (JMenuItem)e.getSource();
			item.setText("Display Names" + (parent.showNames ? " \u2713" : ""));
		}
	}
	
	public class HullAction extends AbstractAction {

		private static final long serialVersionUID = 3382645405034163126L;
		private int hullIndex;
		public HullAction(int hullIndex) {
			super();
			this.hullIndex = hullIndex;
		}

		//@0verride
		public void actionPerformed(ActionEvent e) {
			ConvexHull temp = parent.getCurrentGraph().getHulls().get(hullIndex);
			temp.toggleHull();
			JMenuItem item = (JMenuItem)e.getSource();
			item.setText(temp.getHullName() + (temp.getDisplayHull() ? " \u2713" : ""));
		}
	}
	
	public class ColumnDisplayAction extends AbstractAction {
		
		private static final long serialVersionUID = -251547965416261110L;
		private ColumnDataHandler cdh;
		private int index;
		public ColumnDisplayAction(ColumnDataHandler cdh, int index) {
			super(cdh.getName() + (cdh.isVisible() ? " \u2713" : ""));
			this.cdh = cdh;
			this.index = index;
		}

		//@0verride
		public void actionPerformed(ActionEvent e) {
			cdh.toggleVisible();
			JMenuItem item = (JMenuItem) e.getSource();
			item.setText(cdh.getName() + (cdh.isVisible() ? " \u2713" : ""));
			parent.parent.studentDataTableFrame.refreshTable();
		}
	}
	
	
	public class ExportAction extends AbstractAction {

		private static final long serialVersionUID = -5425238186912620684L;
		
		private JFileChooser fc;


		public ExportAction() {
			super("Export Data");
			fc = new JFileChooser();
			fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		}

		//@0verride
		public void actionPerformed(ActionEvent arg0) {
			int returnVal = fc.showSaveDialog(parent);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				File file = fc.getSelectedFile();
				parent.createExportFile(file.getPath());
				System.out.println("Exporting data to: " + file.getPath());
			} else 
				System.out.println("Export Command cancelled by user.");
		}
	}
		
    public ActionHandler() {
        exitAction = new ExitAction();
        printAction = new PrintAction();
        exportAction = new ExportAction();
    }
    
    public void setParent(AdminApplication parent) {
    	this.parent = parent;
    }
    
    public JMenuBar createMenuBar() {
        JMenuBar menuBar;
        JMenu fileMenu;
        JMenuItem printItem;
        JMenuItem exitItem;
        
        //Create the menu bar.
        menuBar = new JMenuBar();
        fileMenu = new JMenu("Menu");
        menuBar.add(fileMenu);

        //a group of JMenuItems
        printItem = new JMenuItem(printAction);
        exitItem = new JMenuItem(exitAction);
        fileMenu.add(printItem);
        JMenuItem names = new JMenuItem("Display Names" + (parent.showNames ? " \u2713" : ""));
        names.addActionListener(new NamesAction());
        fileMenu.add(names);
        Graph tempGraph = parent.getCurrentGraph();
        if(!tempGraph.getHulls().isEmpty()){
        	JMenu submenu = new JMenu("Hulls");
        	for(int i=0;i<tempGraph.getHulls().size();i++){
        		ConvexHull tempCH = tempGraph.getHulls().get(i);
        		JMenuItem menuItem = new JMenuItem(tempCH.getHullName() +
        				(tempCH.getDisplayHull() ? " \u2713" : ""));
        		menuItem.addActionListener(new HullAction(i));
        		submenu.add(menuItem);
        	}
        	fileMenu.add(submenu);
        }
        fileMenu.add(exitItem);
        

       return menuBar;
    }
    
    public JMenuBar getDataMenuBar(StudentDataColumns studentDataColumns) {
    	JMenuBar menuBar;
    	JMenu fileMenu;
    	JMenu showColumnsMenu;
    	JMenuItem exportItem;
    	JMenuItem exitItem;
    	
    	//Create the menu bar.
    	menuBar = new JMenuBar();
    	fileMenu = new JMenu("Menu");
    	showColumnsMenu = new JMenu("Show Columns");
    	int index = 0;
    	for(ColumnDataHandler cdh: studentDataColumns.columnDataHandlers) {
    		if(cdh.isAlwaysVisible()) continue;
    		showColumnsMenu.add(new ColumnDisplayAction(cdh, index));
    		index++;
    	}
    	menuBar.add(fileMenu);
    	menuBar.add(showColumnsMenu);
    	//a group of JMenuItems
    	exportItem = new JMenuItem(exportAction);
    	exitItem = new JMenuItem(exitAction);
    	fileMenu.add(exportItem);
    	fileMenu.add(exitItem);


    	return menuBar;
    }
}
