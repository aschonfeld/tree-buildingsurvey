package tbs.view;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JScrollBar;
import javax.swing.Timer;

import tbs.TBSGraphics;

public class TBSView extends JComponent implements Printable{

	/**
	 * 8-byte serialization class ID generated by
	 * https://www.fourmilab.ch/hotbits/secure_generate.html
	 */
	private static final long serialVersionUID = -5734020097117125930L;

	private JScrollBar verticalBar;
	private int yOffset = 0; // start of viewable tree area
	private List<TBSButtonType> buttons;
	private Cursor cursor;

	//Tooltip information
	private String tooltipString;
	private Point tooltipLocation;
	private Timer timer;
	private ActionListener hider = new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			timer.stop();
			tooltipString = null;
		}
	};

	public TBSView(boolean admin){
		buttons = TBSButtonType.getButtons(admin);
		verticalBar = new JScrollBar(JScrollBar.VERTICAL, 0, 100, 0, 200);
		timer = new Timer(1000, hider);
		cursor = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);
	}
	
	public Cursor getAppletCursor(){
		return cursor;
	}
	
	public void setAppletCursor(Cursor cursor) {
		this.cursor = cursor;
	}

	public List<TBSButtonType> getButtons() {return buttons;}

	public JScrollBar getVerticalBar() {
		return verticalBar;
	}

	public int getYOffset() {
		return yOffset;
	}

	// sets the start of viewable tree area
	public void setYOffset(int yo) {
		yOffset = yo;
	}

	public void updateTooltip(String name, Point location){
		tooltipString = name;
		tooltipLocation = location;
	}

	public boolean isTooltipRunning(){
		return timer.isRunning();
	}

	/**
	 * Redraw the screen.
	 */
	public void refreshGraphics() {
		repaint();  
	}
	
	/**
	 * How to paint the screen (using view's graphics)
	 */
	public void paintComponent() {
		paintComponent(getGraphics());
	}

	public void renderTooltip(Graphics2D g2){
		if(tooltipString != null){
			int xVal = tooltipLocation.x;
			int yVal = tooltipLocation.y;
			yVal += yOffset;
			g2.setFont(TBSGraphics.tooltipFont);
			xVal -= TBSGraphics.getStringBounds(g2, tooltipString).width/2;
			TBSGraphics.drawCenteredString(g2, tooltipString, xVal, yVal, 0,
					TBSGraphics.buttonsHeight, Color.CYAN, TBSGraphics.tooltipFont);
			g2.setFont(TBSGraphics.font);
			if(!timer.isRunning())
				timer.start();
		}
	}

	public int print(Graphics g, PageFormat pageFormat, int pageIndex)
	throws PrinterException {
		if (pageIndex > 0) {
			return(NO_SUCH_PAGE);
		} else {
			// make pic
			BufferedImage fullSizeImage = new BufferedImage(
					getWidth(), 
					getHeight(), 
					BufferedImage.TYPE_INT_RGB);
			paint(fullSizeImage.getGraphics());

			// scale to fit
			double wRatio = getWidth()/pageFormat.getImageableWidth();
			double hRatio = getHeight()/pageFormat.getImageableHeight();
			int actualWidth;
			int actualHeight;
			if (wRatio > hRatio) {
				actualWidth = (int)(getWidth()/wRatio);
				actualHeight = (int)(getHeight()/wRatio);
			} else {
				actualWidth = (int)(getWidth()/hRatio);
				actualHeight = (int)(getHeight()/hRatio);
			}

			// print it
			Graphics2D g2 = (Graphics2D)g;
			g2.setRenderingHint(
					RenderingHints.KEY_INTERPOLATION,
					RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
			g2.setRenderingHint(
					RenderingHints.KEY_ANTIALIASING, 
					RenderingHints.VALUE_ANTIALIAS_ON);
			g2.setRenderingHint(
					RenderingHints.KEY_FRACTIONALMETRICS, 
					RenderingHints.VALUE_FRACTIONALMETRICS_ON);
			g2.drawImage(fullSizeImage, 
					(int)pageFormat.getImageableX(), 
					(int)pageFormat.getImageableY(), 
					actualWidth, 
					actualHeight, 
					null);
			fullSizeImage = null;
			return(PAGE_EXISTS);
		}
	}
}
