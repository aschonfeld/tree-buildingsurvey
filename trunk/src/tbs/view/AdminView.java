//TBS Version 0.4
//TBSView: one logic for converting Model to a visual representation

package tbs.view;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.util.List;
import java.util.Properties;

import javax.swing.JScrollBar;

import tbs.TBSGraphics;
import tbs.TBSUtils;
import tbs.model.AdminModel;
import tbs.model.Connection;
import tbs.model.EmptyNode;
import tbs.model.ModelElement;
import tbs.model.Node;
import tbs.model.OrganismNode;
import tbs.model.admin.Student;
import tbs.properties.PropertyLoader;
import tbs.view.prompt.Prompt;

/**
 * TBSView contains the logic for rendering the information contained in
 * the data model.
 **/
public class AdminView extends TBSView {

	/**
	 * 8-byte serialization class ID generated by
	 * https://www.fourmilab.ch/hotbits/secure_generate.html
	 */
	private static final long serialVersionUID = 0xBB7D0BF0A83E3AF6L; 

	private AdminModel model;
  
	private boolean hasStudentScroll = false;
	private JScrollBar studentBar;
	private int studentYOffset = 0;

	public AdminView(Graphics2D g2, AdminModel m) {
		super(true);
		model = m;
		setLayout(new BorderLayout());
		add(getVerticalBar(), BorderLayout.EAST);
		int studentBarMax = TBSGraphics.studentNodeHeight * (model.getStudents().size()-1);
		studentBarMax += ((model.getStudents().size()-1) * TBSGraphics.ySpacing);
		if(studentBarMax > model.getApplet().getHeight()){
			studentBar = new JScrollBar(JScrollBar.VERTICAL, 0, model.getApplet().getHeight(), 0, studentBarMax);
			studentBar.setBlockIncrement(TBSGraphics.studentNodeHeight + TBSGraphics.ySpacing);
			add(studentBar, BorderLayout.WEST);
			hasStudentScroll = true;
		}else{
			studentBar = new JScrollBar();
		}
		positionButtons(g2);
	}

	public boolean hasStudentScroll() {
		return hasStudentScroll;
	}

	public JScrollBar getStudentBar() {
		return studentBar;
	}

	public int getStudentYOffset() {
		return studentYOffset;
	}

	// sets the start of viewable tree area
	public void setStudentYOffset(int yo) {
		studentYOffset = yo;
	}

	/**
	 * Displays the button bar.
	 */
	public void renderButtons(Graphics g)
	{
		TBSButtonType buttonClicked = model.getController().getButtonClicked();
		if(buttonClicked == null || model.getPrompt() == null)
			buttonClicked = TBSButtonType.TREE;
		Graphics2D g2 = (Graphics2D) g;
		int characterWidth = TBSGraphics.maxStudentNameWidth + TBSGraphics.checkWidth + TBSGraphics.arrowWidth;
		int studentWidth = characterWidth +
		+ getVerticalBar().getWidth() + (hasStudentScroll ? studentBar.getWidth() : 0);
		TBSGraphics.questionButtonsStart = (model.getApplet().getWidth() - studentWidth)/2 + (studentWidth-getVerticalBar().getWidth())
		- ((TBSGraphics.buttonsWidth*getButtons().size())/2);
		//TBSGraphics.questionButtonsStart = (model.getApplet().getWidth()/2) - ((TBSGraphics.buttonsWidth*buttons.size())/2);
		Rectangle buttonRect = new Rectangle(TBSGraphics.questionButtonsStart,0,TBSGraphics.buttonsWidth, TBSGraphics.buttonsHeight);
		int upperY = TBSGraphics.buttonsHeight - TBSGraphics.buttonsYPadding;
		for(TBSButtonType b: getButtons()) {
			if(b.equals(buttonClicked))
				TBSGraphics.renderButtonBackground(g2, buttonRect, true);
			else
				TBSGraphics.renderButtonBackground(g2, buttonRect, false);
			g2.setColor(Color.gray);
			g2.draw(buttonRect);
			TBSGraphics.drawCenteredString(g2, b.toString(),
					buttonRect.x, upperY, buttonRect.width, 0);
			buttonRect.setLocation(buttonRect.x + TBSGraphics.buttonsWidth, buttonRect.y);
		}

		//Print Button
		buttonRect = new Rectangle(model.getApplet().getWidth()-(TBSGraphics.buttonsWidth/2 + getVerticalBar().getWidth()),
				0,TBSGraphics.buttonsWidth/2, TBSGraphics.buttonsHeight);
		TBSGraphics.renderButtonBackground(g2, buttonRect, false);
		g2.setColor(Color.gray);
		g2.draw(buttonRect);
		TBSGraphics.drawCenteredString(g2, "Print",
				buttonRect.x, upperY, buttonRect.width, 0);
	}

	/**
	 * draws a modelElement
	 */
	public void renderModelElement(Graphics2D g2, ModelElement me) {
		if(me instanceof OrganismNode) 
			renderOrganismNode(g2, (OrganismNode) me);
		else if (me instanceof EmptyNode)
		{
			EmptyNode en = (EmptyNode) me;
			String name = en.getName();
			if(name == null)
				name = "";
			// make empty nodes light purple (like Prof. White's node.gif)
			g2.setColor(TBSGraphics.emptyNodeColor);
			Rectangle yAdjust = en.getRectangle();
			yAdjust.setLocation(yAdjust.x, yAdjust.y - getYOffset());
			g2.fill(yAdjust);
			TBSGraphics.drawCenteredString(g2, name, en.getX(),
					en.getY() - getYOffset(), en.getWidth(), en.getHeight());
		}else if(me instanceof Connection){
			Connection c = (Connection) me;
			Line2D conn = TBSUtils.getConnectionBounds(c.getFrom() , 
					c.getTo());
			conn = TBSUtils.scrollAdjust(conn, getYOffset());
			g2.setColor(TBSGraphics.connectionColor);
			g2.setStroke(new BasicStroke(3));
			g2.draw(conn);
			if(model.getStudent().hasArrows()){
				g2.draw(TBSUtils.getArrowHead(conn, 0.75 * Math.PI));
				g2.draw(TBSUtils.getArrowHead(conn, 1.25 * Math.PI));
			}
			g2.setStroke(new BasicStroke());
		}
	}

	public void renderOrganismNode(Graphics2D g2, OrganismNode on) {
		g2.drawImage(on.getImage(), on.getX(), on.getY() - getYOffset(), null);
	}

	public void renderStudents(Graphics2D g2){
		String selectedStudentName = model.getStudent().getName();
		int x,y,width;
		int characterWidth = TBSGraphics.maxStudentNameWidth + TBSGraphics.checkWidth + TBSGraphics.arrowWidth;
		width = TBSGraphics.maxStudentNameWidth - TBSGraphics.paddingWidth;
		for(Student student : model.getStudents()){
			if(student.getName().equals(selectedStudentName))
				g2.setColor(Color.GREEN);
			else
				g2.setColor(Color.WHITE);
			x = student.getAnchorPoint().x + (hasStudentScroll ? studentBar.getWidth() : 0);
			y = student.getAnchorPoint().y - studentYOffset;
			g2.fillRect(x, y,
					characterWidth, TBSGraphics.studentNodeHeight);
			String studentIndicators = "";
			int indicatorsWidth = TBSGraphics.arrowWidth + TBSGraphics.checkWidth;
			if(student.hasArrows())
				studentIndicators += " \u2192";
			String lastUpdate = student.getLastUpdate();
			if(!TBSUtils.isStringEmpty(lastUpdate))
				studentIndicators += " \u2713";
			if(studentIndicators.length() > 0)
				TBSGraphics.drawCenteredString(g2, studentIndicators,
						x + width, y, indicatorsWidth + TBSGraphics.paddingWidth,
						TBSGraphics.studentNodeHeight,
						Color.BLACK);
			y += TBSGraphics.paddingWidth;
			for(String nameString : student.getNodeName()){
				TBSGraphics.drawCenteredString(g2, nameString,
						x + TBSGraphics.paddingWidth, y,width, TBSGraphics.textHeight,
						Color.BLACK);
				y += TBSGraphics.textHeight;
			}
		}
	}

	/**
	 * Draw the statusString. 	
	 */
	public void renderScreenString(Graphics2D g2) {
		TBSButtonType buttonClicked = model.getController().getButtonClicked();
		int yStep = TBSGraphics.buttonsHeight;

		if(buttonClicked == null || model.getPrompt() == null)
			buttonClicked = TBSButtonType.TREE;

		Properties adminProps = PropertyLoader.getProperties("admin");
		StringBuffer screenString = new StringBuffer(String.format(adminProps.getProperty(buttonClicked.name()), model.getStudent().getName()));
		if(TBSButtonType.TREE.equals(buttonClicked)){
			String lastUpdate = model.getStudent().getLastUpdate();
			if(lastUpdate != null && lastUpdate.length() > 0)
				screenString.append("(Last Update: ").append(lastUpdate).append(")");
		}
		int studentWidth = TBSGraphics.maxStudentNameWidth + TBSGraphics.checkWidth + TBSGraphics.arrowWidth + 
		+ getVerticalBar().getWidth() + (hasStudentScroll ? studentBar.getWidth() : 0);
		int width = model.getApplet().getWidth() - studentWidth;
		int x = (model.getApplet().getWidth() - studentWidth)/2 + (studentWidth-getVerticalBar().getWidth());

		List<String> lines = TBSGraphics.breakStringByLineWidth(g2, screenString.toString(), width);
		int yVal = model.getApplet().getHeight() - (TBSGraphics.buttonsHeight * (lines.size()+1));
		for(String line : lines) {
			Dimension d = TBSGraphics.getStringBounds(g2, line);
			TBSGraphics.drawCenteredString(g2, line, x-(d.width/2), yVal, d.width, yStep, TBSGraphics.emptyNodeColor);
			yVal += yStep;
		}
	}

	/**
	 * How to paint the screen.
	 */
	// this is what the applet calls to refresh the screen
	public void paintComponent(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		RenderingHints rh = new RenderingHints(
				RenderingHints.KEY_TEXT_ANTIALIASING,
				RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
		g2.setRenderingHints(rh);
		g2.setFont(TBSGraphics.font);
		Prompt prompt = model.getPrompt();
		g2.setColor(Color.black);
		g2.fillRect(0, 0, model.getApplet().getWidth(), model.getApplet().getHeight());
		refreshGraphics();
		if(prompt == null){
			for(ModelElement m : model.getElements()){
				if(m instanceof Connection)
					renderModelElement(g2, m);
				else if(((Node) m).isInTree())
					renderModelElement(g2, m);
			}
		}else
			prompt.paintComponent(g2);
		renderButtons(g2);
		renderStudents(g2);
		renderScreenString(g2);
		setCursor(getAppletCursor());
		renderTooltip(g2);
	}

	private void positionButtons(Graphics2D g2)
	{
		Dimension buttonDimensions = TBSGraphics.get2DStringBounds(g2,TBSButtonType.getButtons(true));
		TBSGraphics.buttonsWidth = buttonDimensions.width + 
		TBSGraphics.buttonsXPadding * 2;
		TBSGraphics.buttonsHeight = buttonDimensions.height + 
		TBSGraphics.buttonsYPadding * 2;
	}
}
